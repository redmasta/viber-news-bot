import requests
import json
import os
import google.generativeai as genai
from flask import Flask, request, Response

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

# --- –ö–õ–Æ–ß–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
VIBER_AUTH_TOKEN = os.environ.get("VIBER_AUTH_TOKEN")
NEWS_API_KEY = os.environ.get("NEWS_API_KEY")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI ---
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    print("–û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_latest_news(category='general'):
    print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    try:
        url = f"https://gnews.io/api/v4/top-headlines?category={category}&lang=ru&max=3&apikey={NEWS_API_KEY}" # –£–º–µ–Ω—å—à–∏–º –¥–æ 3 –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        response = requests.get(url)
        data = response.json()
        if "articles" in data and data["articles"]:
            news_list = []
            for article in data['articles']:
                news_item = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}. –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']['name']}."
                news_list.append(news_item)
            return "\n".join(news_list)
        else:
            print(f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π. –û—Ç–≤–µ—Ç API: {data}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return None

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ù–û–í–û–°–¢–ï–ô –° –ü–û–ú–û–©–¨–Æ –ò–ò ---
def summarize_news_with_ai(news_text):
    if not news_text:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Gemini –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        # –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å 'gemini-1.5-pro', –Ω–æ –æ–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–µ–µ. 'flash' - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å.
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –ù–û–í–´–ô, –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢
        prompt = (
            "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ The Economist –∏–ª–∏ Stratfor. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∞ –¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π, –Ω–æ —Å–∂–∞—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ:\n\n"
            "**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** (–ó–¥–µ—Å—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏)\n"
            "**–ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å:** (–í 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ)\n"
            "**–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑:** (–ó–¥–µ—Å—å —Ç–≤–æ–µ –≤–∏–¥–µ–Ω–∏–µ. –ö–∞–∫–æ–≤—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è? –ö–∞–∫–æ–π —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç? –ö—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –∏ –∫–∞–∫–æ–≤—ã –∏—Ö –º–æ—Ç–∏–≤—ã? –ß—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –¥–∞–ª—å—à–µ? –°–≤—è–∂–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏.)\n\n"
            "–°–æ—Ö—Ä–∞–Ω—è–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ç–æ–Ω. –û—Ç–¥–µ–ª—è–π –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —Ç—Ä–µ–º—è –¥–µ—Ñ–∏—Å–∞–º–∏ (---).\n\n"
            "–í–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
            f"{news_text}"
        )
        
        response = model.generate_content(prompt)
        print("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç Gemini –ø–æ–ª—É—á–µ–Ω–∞.")
        return response.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑."

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (create_main_keyboard, send_message, incoming, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

def create_main_keyboard():
    return { "Type": "keyboard", "Buttons": [
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/news", "Text": "üåê –ì–ª–∞–≤–Ω—ã–µ" },
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/politics", "Text": "üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞" },
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/tech", "Text": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" },
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/sport", "Text": "‚öΩ –°–ø–æ—Ä—Ç" },
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/science", "Text": "üî¨ –ù–∞—É–∫–∞" },
            { "Columns": 3, "Rows": 1, "ActionType": "reply", "ActionBody": "/health", "Text": "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ" } ]}

def send_message(receiver_id, text, keyboard=None):
    print(f"--> –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}...")
    headers = {"X-Viber-Auth-Token": VIBER_AUTH_TOKEN}
    payload = { "receiver": receiver_id, "min_api_version": 7, "sender": {"name": "Trumper"}, "type": "text", "text": text }
    if keyboard: payload['keyboard'] = keyboard
    try:
        response = requests.post("https://chatapi.viber.com/pa/send_message", json=payload, headers=headers)
        print(f"<-- –û—Ç–≤–µ—Ç –æ—Ç Viber API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receiver_id}: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ = {response.status_code}")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Viber –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receiver_id}: {e}")

@app.route('/', methods=['POST'])
def incoming():
    viber_request = request.get_json()
    print(f"\n--- –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç Viber ---\n{viber_request}")

    if viber_request.get('event') == 'message':
        sender_id = viber_request['sender']['id']
        print(f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {sender_id}")
        message_text = viber_request['message']['text'].lower()
        category_to_fetch = None
        
        if message_text in ["/news", "/general"]: category_to_fetch = "general"
        elif message_text == "/politics": category_to_fetch = "politics"
        elif message_text == "/tech": category_to_fetch = "technology"
        elif message_text == "/sport": category_to_fetch = "sports"
        elif message_text == "/science": category_to_fetch = "science"
        elif message_text == "/health": category_to_fetch = "health"
        
        if category_to_fetch:
            send_message(sender_id, f"–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–∞—é –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
            news = get_latest_news(category=category_to_fetch)
            if news:
                summary = summarize_news_with_ai(news)
                send_message(sender_id, summary)
            else:
                send_message(sender_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_to_fetch}'.")
        else:
            help_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ Trumper. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞:"
            main_keyboard = create_main_keyboard()
            send_message(sender_id, help_text, main_keyboard)
    
    return Response(status=200)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
