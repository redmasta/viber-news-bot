import requests
import json
import os
import google.generativeai as genai
from flask import Flask, request, Response

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
app = Flask(__name__)

# --- –ö–õ–Æ–ß–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
VIBER_AUTH_TOKEN = os.environ.get("VIBER_AUTH_TOKEN")
NEWS_API_KEY = os.environ.get("NEWS_API_KEY")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI ---
genai.configure(api_key=GEMINI_API_KEY)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_latest_news(category='general'):
    print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    try:
        url = f"https://gnews.io/api/v4/top-headlines?category={category}&lang=ru&max=5&apikey={NEWS_API_KEY}"
        response = requests.get(url)
        data = response.json()
        if "articles" in data and data["articles"]:
            news_list = []
            for article in data['articles']:
                news_item = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}. –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']['name']}."
                news_list.append(news_item)
            return "\n".join(news_list)
        else:
            print(f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π. –û—Ç–≤–µ—Ç API: {data}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return None


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def summarize_news_with_ai(news_text):
    if not news_text:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Gemini –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏...")
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        prompt = (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
            "–ù–∞–ø–∏—à–∏ –æ–¥–Ω—É —Å–≤—è–∑–Ω—É—é, –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É (–Ω–µ –±–æ–ª–µ–µ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–∑–ª–∞–≥–∞—è –≥–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n\n"
            "–í–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏:\n"
            f"{news_text}"
        )
        response = model.generate_content(prompt)
        print("–°–≤–æ–¥–∫–∞ –æ—Ç Gemini –ø–æ–ª—É—á–µ–Ω–∞.")
        return response.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Viber."""
    return {
        "Type": "keyboard",
        "Buttons": [
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/news", "Text": "üåê –ì–ª–∞–≤–Ω—ã–µ"
            },
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/politics", "Text": "üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞"
            },
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/tech", "Text": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
            },
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/sport", "Text": "‚öΩ –°–ø–æ—Ä—Ç"
            },
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/science", "Text": "üî¨ –ù–∞—É–∫–∞"
            },
            {
                "Columns": 3, "Rows": 1, "ActionType": "reply",
                "ActionBody": "/health", "Text": "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"
            }
        ]
    }

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô: —Ç–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def send_message(receiver_id, text, keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Viber, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}...")
    headers = {"X-Viber-Auth-Token": VIBER_AUTH_TOKEN}
    payload = {
        "receiver": receiver_id, "min_api_version": 7, # <-- –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Ä—Å–∏—é API –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        "sender": {"name": "Trumper"}, "type": "text", "text": text
    }
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if keyboard:
        payload['keyboard'] = keyboard
    
    try:
        response = requests.post("https://chatapi.viber.com/pa/send_message", json=payload, headers=headers)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç Viber API: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ = {response.status_code}, –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ = {response.text}")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Viber: {e}")


# --- –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê: –∏–∑–º–µ–Ω–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@app.route('/', methods=['POST'])
def incoming():
    viber_request = request.get_json()

    if viber_request['event'] == 'message':
        message_text = viber_request['message']['text'].lower()
        sender_id = viber_request['sender']['id']
        
        category_to_fetch = None
        
        if message_text in ["/news", "/general"]: category_to_fetch = "general"
        elif message_text == "/politics": category_to_fetch = "politics"
        elif message_text == "/tech": category_to_fetch = "technology"
        elif message_text == "/sport": category_to_fetch = "sports"
        elif message_text == "/science": category_to_fetch = "science"
        elif message_text == "/health": category_to_fetch = "health"
        # entertainment —É–±—Ä–∞–ª–∏, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –∫—Ä–∞—Å–∏–≤–æ —Å–º–æ—Ç—Ä–µ–ª–∏—Å—å
        
        if category_to_fetch:
            send_message(sender_id, f"–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–ª—é –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
            news = get_latest_news(category=category_to_fetch)
            if news:
                summary = summarize_news_with_ai(news)
                send_message(sender_id, summary) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            else:
                send_message(sender_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_to_fetch}'.")
        else:
            # --- –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
            help_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç Trumper. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:"
            main_keyboard = create_main_keyboard()
            send_message(sender_id, help_text, main_keyboard) # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
    
    return Response(status=200)

# --- –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
